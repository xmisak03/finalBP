[{"C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\index.js":"1","C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\serviceWorker.js":"2","C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\App.jsx":"3","C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\FileHandle.jsx":"4","C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\MyPlot.jsx":"5","C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\MainForm.jsx":"6","C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\MainFormPCoA.jsx":"7","C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\ColPlot.jsx":"8","C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\ColoringData.jsx":"9"},{"size":447,"mtime":1618516943240,"results":"10","hashOfConfig":"11"},{"size":5086,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":8814,"mtime":1619376185497,"results":"13","hashOfConfig":"11"},{"size":4107,"mtime":1618582646684,"results":"14","hashOfConfig":"11"},{"size":3318,"mtime":1619129899395,"results":"15","hashOfConfig":"11"},{"size":15015,"mtime":1619302652458,"results":"16","hashOfConfig":"11"},{"size":21645,"mtime":1619302551020,"results":"17","hashOfConfig":"11"},{"size":1254,"mtime":1618602244407,"results":"18","hashOfConfig":"11"},{"size":544,"mtime":1618516870288,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1wh2ykd",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\index.js",[],["41","42"],"C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\serviceWorker.js",[],"C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\App.jsx",["43","44","45","46","47","48","49","50","51","52","53","54","55"],"C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\FileHandle.jsx",[],"C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\MyPlot.jsx",[],"C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\MainForm.jsx",["56","57","58","59"],"import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Formik, Form } from \"formik\";\r\nimport \"./App.jsx\";\r\n\r\nimport { handleFileChosen } from \"./FileHandle.jsx\";\r\nimport { header } from \"./FileHandle.jsx\";\r\nimport { Component } from \"react\";\r\n\r\nimport {store} from './index.js'\r\n\r\nimport {saveAs} from \"file-saver\";\r\n\r\nconst state = {\r\n    button: 1\r\n};\r\n  \r\nclass MainForm extends Component {\r\n    update = () => {\r\n        this.forceUpdate();\r\n    };\r\n\r\n    // after select data file type\r\n    onSelect(e, fileType, props) {\r\n        if (fileType == \"biom\") {\r\n            document.getElementById('metaFile').value = null\r\n            document.getElementById('file').value= null\r\n            document.getElementById('metadataPart').style.display='none'\r\n            document.getElementById('coloringSection').style.display='none'\r\n            document.getElementById('downloadPCA').style.display='none'\r\n            props.metaFile = ''\r\n            props.file = ''\r\n        }      \r\n        else {\r\n            if (props.values.fileType == \"biom\") {\r\n                document.getElementById('coloringSection').style.display='none'\r\n            }\r\n            document.getElementById('metadataPart').style.display='block'\r\n            document.getElementById('downloadPCA').style.display='none'\r\n            props.file = ''\r\n        }\r\n    }\r\n\r\n    // send file to Python and set visibility of components\r\n    onChange(e, props) {\r\n        const formData = new FormData();\r\n        formData.append('file', e.target.files[0])\r\n        formData.append('filename', e.target.value)\r\n        fetch(\"http://localhost:3000/file\", {\r\n            method: \"POST\",      \r\n            body: formData,\r\n        }).then((response) => {\r\n            response.text().then(function(data) {\r\n                props.file = data\r\n              });\r\n        });\r\n\r\n        if (props.fileType === 'biom'){\r\n            document.getElementById('metaFile').value = null\r\n            document.getElementById('metadataPart').style.display='none'\r\n            handleFileChosen(e, e.target.files[0], props)\r\n            document.getElementById('coloringSection').style.display='block'\r\n            props.metaFile = ''\r\n        }\r\n        else{\r\n            document.getElementById('metadataPart').style.display='block'\r\n            document.getElementById('downloadPCA').style.display='none'\r\n            if (props.metaFile == '')\r\n                document.getElementById('coloringSection').style.display='none'\r\n        }\r\n    }\r\n\r\n    // send file with metadata to Python \r\n    onChangeM(e, props) {\r\n        const formData = new FormData();\r\n        formData.append('file', e.target.files[0])\r\n        formData.append('filename', e.target.value)\r\n        fetch(\"http://localhost:3000/file\", {\r\n            method: \"POST\",      \r\n            body: formData,\r\n        }).then((response) => {\r\n            response.text().then(function(data) {\r\n                props.metaFile = data\r\n              });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"formWrapper\">\r\n            <Formik\r\n                /*\r\n                dimension - 2D/3D\r\n                type - type of analysis\r\n                fileType - type of data file\r\n                file - data file\r\n                coloring - metadata for coloring\r\n                metaFileType - type of metadata file\r\n                metaFile - metadata file\r\n                nod - number of dimensions for column graph\r\n                downloadType - type of file for downloading data for column graph\r\n                matrixType - type of file for downloading matrix\r\n                matrix - method for matrix calculation\r\n                 */\r\n                initialValues={{dimension: '2D', type: 'PCA', fileType: 'csv', file: '', coloring: '', metaFileType: 'csv',metaFile: '', \r\n                nod: '', downloadType: 'csv',  matrixType: 'csv', matrix: '', mail: ''}}\r\n                onSubmit={values => {  \r\n                    console.log('submitting', values);  \r\n                }}\r\n\r\n                // send parameters to Python\r\n                onSubmit={(values) => {\r\n                    // send data for calculation\r\n                    if (state.button === 1) {\r\n                        if (values.coloring.length === 0){\r\n                            alert(\"CHOOSE DATAFILE, METADATAFILE AND METADATA FOR COLORING\")\r\n                        }\r\n                        else{\r\n                            alert(\"THE DATA IS BEING PROCESSED...\")\r\n                            fetch(\"http://localhost:3000/api\", {\r\n                                method: \"POST\",      \r\n                                headers: {\r\n                                    'Content-Type': 'application/json'\r\n                                },\r\n                                body: JSON.stringify(values),\r\n                            }).then((response) => \r\n                                // get response from Python\r\n                                response.json()).then((data) => {\r\n                                    if (data === null){\r\n                                        alert(\"WRONG INPUT DATA OR FILE\");\r\n                                    }\r\n                                    else{\r\n                                        document.getElementById('nod2').value= null\r\n                                        document.getElementById('downloadPCA').style.display='block'\r\n                                        document.getElementById('showLegend').style.display = 'none'\r\n                                        document.getElementById('hideLegend').style.display='block'\r\n                                        store.dispatch({ type: \"storeData\", value: data });\r\n                                    }\r\n                                });\r\n                        }\r\n                    }\r\n\r\n                    // send data for saving PCx file\r\n                    if (state.button === 2) {\r\n                        if (values.nod === \"\"){\r\n                            alert(\"ENTER A NUMBER OF DIMENSIONS\")\r\n                        }\r\n                        else if (values.nod < 1 || values.nod > store.getState().base.maxPCx){\r\n                            alert(\"NUMBER OF DIMENSIONS OUT OF RANGE\")\r\n                        }\r\n                        else{\r\n                            alert(\"THE TABLE IS BEING PREPARED...\")\r\n                            fetch(\"http://localhost:3000/table\", {\r\n                                method: \"POST\",      \r\n                                headers: {\r\n                                    'Content-Type': 'application/json'\r\n                                },\r\n                                body: JSON.stringify({id: store.getState().base.id, nod: values.nod, \r\n                                    downloadType: values.downloadType}),\r\n                            }).then(function (response) {\r\n                                return response.blob();\r\n                                }\r\n                            )\r\n                            .then(function(blob) {\r\n                                if (values.downloadType === 'csv')\r\n                                    saveAs(blob, \"table.data\");\r\n                                else if (values.downloadType === 'json')\r\n                                    saveAs(blob, \"table.json\");\r\n                                else if (values.downloadType === 'excel')\r\n                                    saveAs(blob, \"table.xlsx\");\r\n                            })\r\n                            .catch(error => {\r\n                                alert(\"SAVING UNSUCCESSFUL\")\r\n                            })\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n            {(props) => (\r\n                <Form onSubmit={props.handleSubmit}>\r\n                    <label className=\"title\">\r\n                        Dimension\r\n                    </label>\r\n\r\n                    <div>\r\n                        <select\r\n                            className=\"select\"\r\n                            name=\"dimension\"\r\n                            id=\"dimension\"\r\n                            onChange={props.handleChange}\r\n                            onBlur={props.handleBlur}\r\n                            value={props.values.dimension}\r\n                        >\r\n                            <option value=\"2D\">2D</option>\r\n                            <option value=\"3D\">3D</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label className=\"warning\">\r\n                            FILE HAS TO CONTAIN HEADER AND BE IN PROPER FORMAT!\r\n                        </label>\r\n                    </div>\r\n\r\n                    <label className=\"title\">\r\n                        Data file\r\n                    </label>\r\n                    <div>\r\n                        <label className=\"noteColoring\">\r\n                            In the case of biom format also with metadata, otherwise without it.\r\n                        </label> \r\n                    </div>\r\n                    \r\n                    <div>\r\n                        <select\r\n                            className=\"select\"\r\n                            name=\"fileType\"\r\n                            id=\"fileType\"\r\n                            ref = {(input)=> this.fileType = input}\r\n                            onChange={props.handleChange}\r\n                            onBlur={props.handleBlur}\r\n                            value={props.values.fileType}\r\n                            onChangeCapture={e => {this.onSelect(e, this.fileType.value, props)}}\r\n                        >\r\n                            <option value=\"csv\">csv/txt</option>\r\n                            <option value=\"json\">json</option>\r\n                            <option value=\"excel\">excel</option>\r\n                            <option value=\"biom\">biom</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>                \r\n                        <input\r\n                            type=\"file\"\r\n                            name=\"file\"\r\n                            id=\"file\"\r\n                            onChange={this.update}\r\n                            onInput={e => {this.onChange(e, props.values)}}\r\n                            onBlur={props.handleBlur}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"metadataPart\" id=\"metadataPart\">\r\n                        <label className=\"title\">\r\n                            Metadata file\r\n                        </label>\r\n                        <div>\r\n                            <select\r\n                                className=\"select\"\r\n                                name=\"metaFileType\"\r\n                                id=\"metaFileType\"\r\n                                onChange={props.handleChange}\r\n                                onBlur={props.handleBlur}\r\n                                value={props.values.metaFileType}\r\n                            >\r\n                                <option value=\"csv\">csv/txt</option>\r\n                                <option value=\"json\">json</option>\r\n                                <option value=\"excel\">excel</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div>                \r\n                            <input\r\n                                type=\"file\"\r\n                                name=\"metaFile\"\r\n                                id=\"metaFile\"\r\n                                onChange={this.update}\r\n                                onInput={e => {this.onChangeM(e, props.values)}}\r\n                                onChangeCapture={e => {handleFileChosen(e, e.target.files[0], props.values)}} \r\n                                onBlur={props.handleBlur}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <label className=\"noteColoring\">\r\n                        Below, select metadata for coloring, please.\r\n                    </label>\r\n\r\n                    <div id=\"coloringSection\">\r\n                        {header.map(element => (\r\n                            <div key={element} className=\"metadata\">\r\n                                <input \r\n                                    type=\"checkbox\"\r\n                                    name=\"coloring\"\r\n                                    id=\"coloring\"\r\n                                    value={element}\r\n                                    onChange={props.handleChange}\r\n                                    onBlur={props.handleBlur}\r\n                                />\r\n                                <p>{element}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <button type=\"submit\" classtype=\"submit\" onClick={() => (state.button = 1)}>\r\n                            Submit\r\n                        </button> \r\n                    </div>\r\n                    \r\n\r\n                    <div id=\"downloadPCA\" className=\"noteDownload\" style={{paddingTop: '10px'}}>\r\n                        <label className=\"title\">\r\n                            Download options\r\n                        </label>\r\n                        <div>\r\n                            <label>\r\n                                If you want to download table of transformation data according to a calculation in previous step, \r\n                                enter a number of dimensions from range (1, {store.getState().base.maxPCx}), please.\r\n                            </label>\r\n                        </div>\r\n                        \r\n\r\n                        <input type=\"text\" name=\"nod\" className=\"input\" id=\"nod2\" onChange={props.handleChange}/>\r\n\r\n                        <div>\r\n                            <select\r\n                                className=\"select\"\r\n                                name=\"downloadType\"\r\n                                id=\"downloadType\"\r\n                                onChange={props.handleChange}\r\n                                onBlur={props.handleBlur}\r\n                                value={props.values.downloadType}\r\n                            >\r\n                                <option value=\"csv\">csv</option>\r\n                                <option value=\"json\">json</option>\r\n                                <option value=\"excel\">excel</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <button type=\"submit\" classtype=\"submit\" style={{width: '100%'}} onClick={() => (state.button = 2)}>\r\n                            Download transformed data\r\n                        </button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n            </Formik>\r\n        </div>\r\n        );\r\n    }\r\n  };\r\n  export default MainForm;\r\n","C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\MainFormPCoA.jsx",["60","61","62","63","64","65","66","67","68"],"import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Formik, Form } from \"formik\";\r\nimport \"./App.jsx\";\r\n\r\nimport { handleFileChosen } from \"./FileHandle.jsx\";\r\nimport { header } from \"./FileHandle.jsx\";\r\nimport { Component } from \"react\";\r\n\r\nimport {store} from './index.js'\r\n\r\nimport {saveAs} from \"file-saver\";\r\n\r\nlet mail\r\n\r\nconst state = {\r\n    button: 1\r\n};\r\n\r\nclass MainFormPCoA extends Component {\r\n    update = () => {\r\n        this.forceUpdate();\r\n    };\r\n\r\n    // waiting for data in case of unifrac calculation\r\n    waitingForData(id){\r\n        let timer = setInterval(function() {  \r\n            fetch(`http://localhost:3000/result/${id}`, {\r\n                method: \"POST\",      \r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(null),\r\n            }).then((response) => \r\n                // get response from Python\r\n                response.json()).then((data) => {\r\n                    if (data == null){\r\n                        //pass\r\n                    }\r\n                    else if (data['result'] == \"error\"){\r\n                        clearInterval(timer);\r\n                        alert(\"SOMETHING WENT WRONG, CHECK YOUR INPUT DATA\")\r\n                    }\r\n                    else if(data != null){\r\n                        clearInterval(timer);\r\n                        document.getElementById('downloadPCoA').style.display='block'\r\n                        store.dispatch({ type: \"storeData\", value: data });\r\n                    }\r\n                }); \r\n        }, 5000);\r\n    }\r\n\r\n    // after select data file type\r\n    onSelect(e, fileType, props) {\r\n        console.log(fileType)\r\n        if (fileType == \"biom\") {\r\n            document.getElementById('metaFilePCoA').value = null\r\n            document.getElementById('filePCoA').value= null\r\n            document.getElementById('metadataPartPCoA').style.display='none'\r\n            document.getElementById('coloringSectionPCoA').style.display='none'\r\n            document.getElementById('downloadPCoA').style.display='none'\r\n            props.metaFile = ''\r\n            props.file = ''\r\n        }      \r\n        else {\r\n            if (props.values.fileType == \"biom\") {\r\n                document.getElementById('coloringSectionPCoA').style.display='none'\r\n            }\r\n            document.getElementById('metadataPartPCoA').style.display='block'\r\n            document.getElementById('downloadPCoA').style.display='none'\r\n            props.file = ''\r\n        }\r\n    }\r\n\r\n    // send file without metadata to Python\r\n    onChange(e, props) {\r\n        const formData = new FormData();\r\n        formData.append('file', e.target.files[0])\r\n        formData.append('filename', e.target.value)\r\n        fetch(\"http://localhost:3000/file\", {\r\n            method: \"POST\",      \r\n            body: formData,\r\n        }).then((response) => {\r\n            response.text().then(function(data) {\r\n                props.file = data\r\n              });\r\n        });\r\n\r\n        if (props.fileType === 'biom'){\r\n            document.getElementById('metaFilePCoA').value = null\r\n            document.getElementById('metadataPartPCoA').style.display='none'\r\n            handleFileChosen(e, e.target.files[0], props)\r\n            document.getElementById('coloringSectionPCoA').style.display='block'\r\n            props.metaFile = ''\r\n        }\r\n        else{\r\n            document.getElementById('metadataPartPCoA').style.display='block'\r\n            document.getElementById('downloadPCoA').style.display='none'\r\n            if (props.metaFile == '')\r\n                document.getElementById('coloringSectionPCoA').style.display='none'\r\n        }\r\n    }\r\n\r\n    // send file with metadata to Python \r\n    onChangeM(e, props) {\r\n        const formData = new FormData();\r\n        formData.append('file', e.target.files[0])\r\n        formData.append('filename', e.target.value)\r\n        fetch(\"http://localhost:3000/file\", {\r\n            method: \"POST\",      \r\n            body: formData,\r\n        }).then((response) => {\r\n            response.text().then(function(data) {\r\n                props.metaFile = data\r\n              });\r\n        });\r\n    }\r\n\r\n    getMail() {\r\n        let inputMail = prompt(\"It may take a while. Please enter your mail for results:\", \"\");\r\n        const regexMail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (regexMail.test(String(inputMail).toLowerCase())) {\r\n            return inputMail\r\n        }\r\n        else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"formWrapper\">\r\n            <Formik\r\n                /*\r\n                dimension - 2D/3D\r\n                type - type of analysis\r\n                fileType - type of data file\r\n                file - data file\r\n                coloring - metadata for coloring\r\n                metaFileType - type of metadata file\r\n                metaFile - metadata file\r\n                nod - number of dimensions for column graph\r\n                downloadType - type of file for downloading data for column graph\r\n                matrixType - type of file for downloading matrix\r\n                matrix - method for matrix calculation\r\n                 */\r\n                initialValues={{dimension: '2D', type: 'PCoA', fileType: 'csv', file: '',coloring: '', metaFileType: 'csv', \r\n                metaFile: '', nod: '', downloadType: 'csv', matrixType: 'csv', matrix: 'bray_curtis', mail: ''}}\r\n                onSubmit={values => {  \r\n                    console.log('submitting', values);  \r\n                }}\r\n                \r\n                // send parameters to Python\r\n                onSubmit={(values) => {\r\n                    // send data for calculation\r\n                    if (state.button === 1) {\r\n                        if (values.coloring.length === 0){\r\n                            alert(\"CHOOSE DATAFILE, METADATAFILE AND METADATA FOR COLORING\")\r\n                        }\r\n                        else{\r\n                            if (values.matrix != \"bray_curtis\"){\r\n                                while (values.mail == \"\") {\r\n                                    mail = this.getMail()\r\n                                    if (mail != \"\") {\r\n                                        values.mail = mail\r\n                                    }\r\n                                }\r\n                                values.mail = prompt(\"It may take a while. Please enter your mail for results:\", \"\");\r\n                            }\r\n                            else {\r\n                                alert(\"THE DATA IS BEING PROCESSED...\")\r\n                            }\r\n                            \r\n                            fetch(\"http://localhost:3000/api\", {\r\n                                method: \"POST\",      \r\n                                headers: {\r\n                                    'Content-Type': 'application/json'\r\n                                },\r\n                                body: JSON.stringify(values),\r\n                            }).then((response) => \r\n                                // get response from Python\r\n                                response.json()).then((data) => {\r\n                                    if (data === null){\r\n                                        alert(\"WRONG INPUT DATA OR FILE\");\r\n                                    }\r\n                                    else if(Object.keys(data).length == 1){\r\n                                        this.waitingForData(data.id)\r\n                                    }\r\n                                    else{\r\n                                        document.getElementById('nod').value= null\r\n                                        document.getElementById('downloadPCoA').style.display='block'\r\n                                        document.getElementById('showLegend').style.display = 'none'\r\n                                        document.getElementById('hideLegend').style.display='block'\r\n                                        store.dispatch({ type: \"storeData\", value: data });\r\n                                    }\r\n                                });\r\n                        }\r\n                    }\r\n\r\n                    // send data for saving PCx file\r\n                    if (state.button === 2) {\r\n                        if (values.nod === \"\"){\r\n                            alert(\"ENTER A NUMBER OF DIMENSIONS\")\r\n                        }\r\n                        else if (values.nod < 1 || values.nod > store.getState().base.colGraph.length){\r\n                            alert(\"NUMBER OF DIMENSIONS OUT OF RANGE\")\r\n                        }\r\n                        else{\r\n                            alert(\"THE TABLE IS BEING PREPARED...\")\r\n                            fetch(\"http://localhost:3000/table\", {\r\n                                method: \"POST\",      \r\n                                headers: {\r\n                                    'Content-Type': 'application/json'\r\n                                },\r\n                                body: JSON.stringify({id: store.getState().base.id, nod: values.nod, \r\n                                    downloadType: values.downloadType}),\r\n                            }).then(function (response) {\r\n                                return response.blob();\r\n                                }\r\n                            )\r\n                            .then(function(blob) {\r\n                                if (values.downloadType === 'csv')\r\n                                    saveAs(blob, \"table.data\");\r\n                                else if (values.downloadType === 'json')\r\n                                    saveAs(blob, \"table.json\");\r\n                                else if (values.downloadType === 'excel')\r\n                                    saveAs(blob, \"table.xlsx\");\r\n                            })\r\n                            .catch(error => {\r\n                                alert(\"SAVING UNSUCCESSFUL\")\r\n                            })\r\n                        }\r\n                    }\r\n\r\n                    // send data for saving matrix file\r\n                    if (state.button === 3) {\r\n                        alert(\"THE MATRIX IS BEING PREPARED...\")\r\n                        fetch(\"http://localhost:3000/matrix\", {\r\n                            method: \"POST\",      \r\n                            headers: {\r\n                                'Content-Type': 'application/json'\r\n                            },\r\n                            body: JSON.stringify({id: store.getState().base.id, downloadType: values.matrixType}),\r\n                        }).then(function (response) {\r\n                            return response.blob();\r\n                            }\r\n                        )\r\n                        .then(function(blob) {\r\n                            if (values.matrixType === 'csv')\r\n                                saveAs(blob, \"matrix.data\");\r\n                            else if (values.matrixType === 'json')\r\n                                saveAs(blob, \"matrix.json\");\r\n                            else if (values.matrixType === 'excel')\r\n                                saveAs(blob, \"matrix.xlsx\");\r\n                        })\r\n                        .catch(error => {\r\n                            alert(\"SAVING UNSUCCESSFUL\")\r\n                        })\r\n                    }\r\n                }}\r\n            >\r\n            {(props) => (\r\n                <Form onSubmit={props.handleSubmit}>\r\n                    <div id=\"PCoAForm\">\r\n                        <label className=\"title\">\r\n                            Dimension\r\n                        </label>\r\n                        <div>\r\n                            <select\r\n                                className=\"select\"\r\n                                name=\"dimension\"\r\n                                id=\"dimension\"\r\n                                onChange={props.handleChange}\r\n                                onBlur={props.handleBlur}\r\n                                value={props.values.dimension}\r\n                            >\r\n                                <option value=\"2D\">2D</option>\r\n                                <option value=\"3D\">3D</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <label className=\"title\">\r\n                            Method for matrix calculation\r\n                        </label>\r\n                        <div>\r\n                            <select\r\n                                className=\"select\"\r\n                                name=\"matrix\"\r\n                                id=\"matrix\"\r\n                                onChange={props.handleChange}\r\n                                onBlur={props.handleBlur}\r\n                                value={props.values.matrix}\r\n                            >\r\n                                <option value=\"bray_curtis\">Bray-Curtis</option>\r\n                                <option value=\"unifrac_weighted\">Unifrac weighted</option>\r\n                                <option value=\"unifrac_unweighted\">Unifrac unweighted</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label className=\"warning\">\r\n                                FILE HAS TO CONTAIN HEADER AND BE IN PROPER FORMAT!\r\n                            </label>\r\n                        </div>\r\n\r\n                        <label className=\"title\">\r\n                            Data for matrix calculation\r\n                        </label>\r\n\r\n                        <div>\r\n                            <select\r\n                                className=\"select\"\r\n                                name=\"fileType\"\r\n                                id=\"fileType\"\r\n                                ref = {(input)=> this.fileType = input}\r\n                                onChange={props.handleChange}\r\n                                onBlur={props.handleBlur}\r\n                                value={props.values.fileType}\r\n                                onChangeCapture={e => {this.onSelect(e, this.fileType.value, props)}}\r\n                            >\r\n                                <option value=\"csv\">csv/txt</option>\r\n                                <option value=\"json\">json</option>\r\n                                <option value=\"excel\">excel</option>\r\n                                <option value=\"biom\">biom</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div>                \r\n                            <input\r\n                                type=\"file\"\r\n                                name=\"file\"\r\n                                id=\"filePCoA\"\r\n                                onChange={this.update}\r\n                                onInput={e => {this.onChange(e, props.values)}}\r\n                                onBlur={props.handleBlur}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"metadataPart\" id=\"metadataPartPCoA\">\r\n                            <label className=\"title\">\r\n                                Metadata file\r\n                            </label>\r\n                            <div>\r\n                                <label className=\"noteColoring\">\r\n                                    In the case of biom format also with metadata, otherwise without it.\r\n                                </label> \r\n                            </div>\r\n\r\n                            <div>\r\n                                <select\r\n                                    className=\"select\"\r\n                                    name=\"metaFileType\"\r\n                                    id=\"metaFileTypePCoA\"\r\n                                    onChange={props.handleChange}\r\n                                    onBlur={props.handleBlur}\r\n                                    value={props.values.metaFileType}\r\n                                >\r\n                                    <option value=\"csv\">csv/txt</option>\r\n                                    <option value=\"json\">json</option>\r\n                                    <option value=\"excel\">excel</option>\r\n                                </select>\r\n                            </div>\r\n                            <div>                \r\n                                <input\r\n                                    type=\"file\"\r\n                                    name=\"metaFile\"\r\n                                    id=\"metaFilePCoA\"\r\n                                    onChange={this.update}\r\n                                    onInput={e => {this.onChangeM(e, props.values)}}\r\n                                    onChangeCapture={e => {handleFileChosen(e, e.target.files[0], props.values)}} \r\n                                    onBlur={props.handleBlur}\r\n                                />\r\n                            </div>\r\n                        </div>                    \r\n                        \r\n                        <label className=\"noteColoring\">\r\n                            Below, select metadata for coloring, please.\r\n                        </label>\r\n\r\n                        <div id=\"coloringSectionPCoA\">\r\n                            {header.map(element => (\r\n                                <div key={element} className=\"metadata\">\r\n                                    <input \r\n                                        type=\"checkbox\"\r\n                                        name=\"coloring\"\r\n                                        id=\"coloring\"\r\n                                        value={element}\r\n                                        onChange={props.handleChange}\r\n                                        onBlur={props.handleBlur}\r\n                                    />\r\n                                    <p>{element}</p>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n\r\n                        <div>\r\n                            <button type=\"submit\" classtype=\"submit\" onClick={() => (state.button = 1)}>\r\n                                Submit\r\n                            </button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                    <div id=\"downloadPCoA\" className=\"noteDownload\" style={{paddingTop: '10px'}}>\r\n                        <label className=\"title\">\r\n                            Download options\r\n                        </label>\r\n\r\n                        <div>\r\n                            <label>\r\n                                Select a file type for downloading distance matrix according to a calculation in previous step.\r\n                            </label>\r\n                        </div>\r\n                        \r\n                        <div>\r\n                            <select\r\n                                className=\"select\"\r\n                                name=\"matrixType\"\r\n                                id=\"matrixType\"\r\n                                onChange={props.handleChange}\r\n                                onBlur={props.handleBlur}\r\n                                value={props.values.matrixType}\r\n                            >\r\n                                <option value=\"csv\">csv</option>\r\n                                <option value=\"json\">json</option>\r\n                                <option value=\"excel\">excel</option>\r\n                            </select>\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"submit\" classtype=\"submit\" style={{width: '100%'}} onClick={() => (state.button = 3)}>\r\n                                Download distance matrix\r\n                            </button>\r\n                        </div>\r\n\r\n                        <label>\r\n                            If you want to download table of transformation data according to a calculation in previous step, \r\n                            enter a number of dimensions from range (1, {store.getState().base.maxPCx}), please.\r\n                        </label>\r\n\r\n                        <input type=\"text\" id=\"nod\" className=\"input\" onChange={props.handleChange}/>\r\n\r\n                        <div>\r\n                            <select\r\n                                className=\"select\"\r\n                                name=\"downloadType\"\r\n                                id=\"downloadType\"\r\n                                onChange={props.handleChange}\r\n                                onBlur={props.handleBlur}\r\n                                value={props.values.downloadType}\r\n                            >\r\n                                <option value=\"csv\">csv</option>\r\n                                <option value=\"json\">json</option>\r\n                                <option value=\"excel\">excel</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <div>\r\n                            <button type=\"submit\" classtype=\"submit\" style={{width: '100%'}} onClick={() => (state.button = 2)}>\r\n                                Download transformed data\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n            </Formik>\r\n        </div>\r\n        );\r\n    }\r\n  };\r\n  export default MainFormPCoA;\r\n","C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\ColPlot.jsx",[],"C:\\Users\\silvi\\Documents\\FIT\\BP\\bpjs\\src\\ColoringData.jsx",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":127,"column":9,"nodeType":"75","messageId":"76","endLine":127,"endColumn":10},{"ruleId":"73","severity":1,"message":"77","line":128,"column":9,"nodeType":"75","messageId":"76","endLine":128,"endColumn":10},{"ruleId":"73","severity":1,"message":"78","line":129,"column":9,"nodeType":"75","messageId":"76","endLine":129,"endColumn":10},{"ruleId":"73","severity":1,"message":"79","line":130,"column":9,"nodeType":"75","messageId":"76","endLine":130,"endColumn":17},{"ruleId":"73","severity":1,"message":"80","line":131,"column":9,"nodeType":"75","messageId":"76","endLine":131,"endColumn":12},{"ruleId":"73","severity":1,"message":"81","line":132,"column":9,"nodeType":"75","messageId":"76","endLine":132,"endColumn":17},{"ruleId":"73","severity":1,"message":"82","line":133,"column":9,"nodeType":"75","messageId":"76","endLine":133,"endColumn":15},{"ruleId":"73","severity":1,"message":"83","line":134,"column":9,"nodeType":"75","messageId":"76","endLine":134,"endColumn":11},{"ruleId":"73","severity":1,"message":"84","line":135,"column":9,"nodeType":"75","messageId":"76","endLine":135,"endColumn":15},{"ruleId":"73","severity":1,"message":"85","line":136,"column":9,"nodeType":"75","messageId":"76","endLine":136,"endColumn":16},{"ruleId":"73","severity":1,"message":"86","line":137,"column":9,"nodeType":"75","messageId":"76","endLine":137,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":141,"column":30,"nodeType":"89","messageId":"90","endLine":141,"endColumn":32},{"ruleId":"87","severity":1,"message":"91","line":151,"column":36,"nodeType":"89","messageId":"90","endLine":151,"endColumn":38},{"ruleId":"87","severity":1,"message":"91","line":25,"column":22,"nodeType":"89","messageId":"90","endLine":25,"endColumn":24},{"ruleId":"87","severity":1,"message":"91","line":35,"column":39,"nodeType":"89","messageId":"90","endLine":35,"endColumn":41},{"ruleId":"87","severity":1,"message":"91","line":68,"column":32,"nodeType":"89","messageId":"90","endLine":68,"endColumn":34},{"ruleId":"92","severity":1,"message":"93","line":112,"column":17,"nodeType":"94","endLine":177,"endColumn":19},{"ruleId":"87","severity":1,"message":"91","line":40,"column":45,"nodeType":"89","messageId":"90","endLine":40,"endColumn":47},{"ruleId":"87","severity":1,"message":"91","line":56,"column":22,"nodeType":"89","messageId":"90","endLine":56,"endColumn":24},{"ruleId":"87","severity":1,"message":"91","line":66,"column":39,"nodeType":"89","messageId":"90","endLine":66,"endColumn":41},{"ruleId":"87","severity":1,"message":"91","line":99,"column":32,"nodeType":"89","messageId":"90","endLine":99,"endColumn":34},{"ruleId":"92","severity":1,"message":"93","line":154,"column":17,"nodeType":"94","endLine":260,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":161,"column":47,"nodeType":"89","messageId":"90","endLine":161,"endColumn":49},{"ruleId":"87","severity":1,"message":"91","line":162,"column":52,"nodeType":"89","messageId":"90","endLine":162,"endColumn":54},{"ruleId":"87","severity":1,"message":"88","line":164,"column":46,"nodeType":"89","messageId":"90","endLine":164,"endColumn":48},{"ruleId":"87","severity":1,"message":"91","line":186,"column":70,"nodeType":"89","messageId":"90","endLine":186,"endColumn":72},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'x' is assigned a value but never used.","Identifier","unusedVar","'y' is assigned a value but never used.","'z' is assigned a value but never used.","'category' is assigned a value but never used.","'evr' is assigned a value but never used.","'colGraph' is assigned a value but never used.","'legend' is assigned a value but never used.","'id' is assigned a value but never used.","'maxPCx' is assigned a value but never used.","'indexes' is assigned a value but never used.","'showLegend' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]